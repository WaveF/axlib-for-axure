var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(function() {
  main();
  function main() {
    if (!window.$axure || !window.jQuery) {
      console.log("请先加载 $axure 和 jquery!");
      return;
    }
    initYepNope();
    utils();
    InitAxlib();
    window.jsonbin = getJsonBinClass();
    window.getEl = getEl;
    window.AXLIB = window.axlib = {
      name: "axlib",
      version: "3.4.4",
      use,
      // 加载其他模块
      layout,
      // 预设的界面元素显隐及缩放
      trace,
      // 显示一段预设样式的文本
      jsonbin: getJsonBinClass(),
      // 调用jsonbin v3的方法在线读写数据
      hosting,
      // 参数定义同步到哪里，默认是axhub
      loading,
      // 插入一个加载动画
      find,
      // 便捷提取指定元件名的对象，示例：let els = axlib.find('sym1', 'sym2'...); let { sym1, sym2 } = els;
      saveTextFile,
      // 传入字符串与文件名保存文件
      testExp,
      // 等待测试表达式的方法
      loadJsModule,
      // 以 es module 方式加载 js
      getEl,
      // 通过元件名获取元素
      plugins: getPlugins(),
      formatRepeaterData: $axure.ex.formatRepeaterData,
      setGlobalVar: $axure.setGlobalVariable,
      getGlobalVar: $axure.getGlobalVariable,
      getOverlapData: $axure.getOverlapData,
      getDiffData: $axure.getDiffData
    };
  }
  function InitAxlib() {
    $axure.ex = { fn: {} };
    $axure.getEl = (...args) => {
      let arr = [];
      args.forEach((name) => {
        arr.push($axure(`@${name}`));
      });
      const result = arr.length === 1 ? arr[0] : arr;
      return result;
    };
    $axure.internal(function($ax) {
      $axure.ex.refreshRepeater = $ax.repeater.refreshRepeater;
      $ax.public.fn.refreshRepeater = function() {
        let elementId = this.getElementIds()[0];
        $axure.ex.refreshRepeater(elementId);
        return this;
      };
      $ax.repeater.refreshRepeater = function(elementId, etc) {
        $axure.ex.refreshRepeater(...arguments);
        $(`#${elementId}`).trigger("REPEATER_REFRESH");
      };
      $axure.ex.getRepeaterRows = $ax.repeater.getAllItemIds;
      $ax.public.fn.getRepeaterRows = function() {
        return $axure.ex.getRepeaterRows(this.getElementIds()[0]);
      };
      $axure.ex.getRepeater = function(elementId) {
        let repeater;
        $axure(function(obj) {
          return obj.type == "repeater";
        }).each(function(obj, id) {
          if (id == elementId) {
            repeater = obj;
          }
        });
        return repeater;
      };
      $axure.ex.formatRepeaterData = function(data, options) {
        options = options || { format: "auto", key: void 0, trim: void 0 };
        let trim = options.trim;
        let format = options["format"].toLowerCase();
        let newData;
        if (format === "default") {
          newData = data;
        } else if (format === "auto") {
          let arr = [];
          for (let i = 0; i < data.length; i++) {
            let item = data[i];
            let obj = {};
            for (let k2 in item) {
              obj[k2] = item[k2].text;
            }
            arr.push(obj);
          }
          newData = arr;
        } else if (format === "row") {
          let result = {};
          for (let i = 0; i < data.length; i++) {
            let item = data[i];
            let obj = {};
            let key = Object.values(item)[0].text;
            let val = [];
            for (let k2 in item) {
              let sub = item[k2];
              if (sub.text != key) {
                val.push(sub.text);
              }
            }
            if (trim === void 0) {
              trim = false;
            }
            if (trim) {
              val = val[0];
            }
            obj[key] = val;
            $.extend(result, obj);
          }
          newData = result;
        } else if (format === "column" || format === "col") {
          let obj = {};
          for (let i = 0; i < data.length; i++) {
            let item = data[i];
            for (k in item) {
              if (!obj[k]) {
                obj[k] = [item[k].text];
              } else {
                obj[k].push(item[k].text);
              }
            }
          }
          newData = obj;
        } else if (format === "key") {
          if (!options.key) {
            console.log("未提供Key名，将不会进行格式化...");
            newData = data;
          } else {
            let result = {};
            let pKey = options.key;
            for (let i = 0; i < data.length; i++) {
              let item = data[i];
              let key = item[pKey].text;
              let val = [];
              let obj = {};
              for (let k2 in item) {
                if (k2 != pKey) {
                  val.push(item[k2].text);
                }
              }
              if (options.first) {
                val = val[0];
              }
              obj[key] = val;
              $.extend(result, obj);
            }
            newData = result;
          }
        } else if (format === "tree") {
          let arr = [];
          for (let i = 0; i < data.length; i++) {
            let item = data[i];
            let obj = {};
            for (let k2 in item) {
              obj[k2] = item[k2].text;
            }
            arr.push(obj);
          }
          newData = tree(arr);
          if (trim === void 0) {
            trim = true;
          }
          options.trim && trimTreeData(newData);
        } else {
          trace(`未注册的格式化参数: ${format}，请使用此定义 { format: 'auto' || 'row' || 'column' || 'tree' || 'key' } ，其中 key 模式需额外提供索引键列名称.`);
          newData = data;
        }
        return newData;
      };
      $axure.formatRepeaterData = $axure.ex.formatRepeaterData;
      $axure.ex.getRepeaterData = function(elementId) {
        let ids = $ax.repeater.getAllItemIds(elementId);
        let columns = $axure.ex.getRepeater(elementId).dataProps;
        let rows = [];
        for (let i = 0, il = ids.length; i < il; i++) {
          let row = {};
          for (let j = 0, jl = columns.length; j < jl; j++) {
            let name = columns[j].toLowerCase();
            let id = ids[i];
            if (typeof id == "string" && id.indexOf("-") != -1)
              id = $ax.repeater.getItemIdFromElementId(id);
            let value = $ax.repeater.getData({}, elementId, ids[i], name, "data");
            if (typeof value == "object") {
              value = $ax.deepCopy(value);
              if (value.type === void 0) {
                value.type = "text";
              }
              row[name] = value;
            } else {
              row[name] = {
                type: "text",
                text: value
              };
            }
          }
          rows.push(row);
        }
        return rows;
      };
      $ax.public.fn.getRepeaterData = function(options) {
        let elementId = this.getElementIds()[0];
        let data = $axure.ex.getRepeaterData(elementId);
        data = $axure.ex.formatRepeaterData(data, options);
        return data;
      };
      $axure.ex.getRepeaterDataOnce = function(elementId) {
        try {
          var result;
          return window.$axure(function(elementId2) {
            return "repeater" === elementId2.type;
          }).each(function(obj, id) {
            elementId === id && (result = obj);
          }), result.data;
        } catch (err) {
          return console.error("Error：Can not get repeater data by id " + err);
        }
      };
      $ax.public.fn.getRepeaterDataOnce = function(options) {
        let elementId = this.getElementIds()[0];
        let data = $axure.ex.getRepeaterDataOnce(elementId);
        data = $axure.ex.formatRepeaterData(data, options);
        return data;
      };
      $axure.ex.getRepeaterInitedData = $axure.ex.getRepeaterDataOnce;
      $ax.public.fn.getRepeaterInitedData = $ax.public.fn.getRepeaterDataOnce;
      $axure.ex.getRepeaterDataDiff = function(elementId) {
        let data = $axure.ex.getRepeaterData(elementId);
        let dataOnce = $axure.ex.getRepeaterDataOnce(elementId);
        data.splice(0, dataOnce.length);
        return data;
      };
      $ax.public.fn.getRepeaterDataDiff = function(options) {
        let elementId = this.getElementIds()[0];
        let diff = $axure.ex.getRepeaterDataDiff(elementId);
        return $axure.ex.formatRepeaterData(diff, options);
      };
      $axure.ex.getRepeaterDataSame = function(elementId) {
        let data = $axure.ex.getRepeaterData(elementId);
        let dataOnce = $axure.ex.getRepeaterDataOnce(elementId);
        data.splice(dataOnce.length, data.length);
        return data;
      };
      $ax.public.fn.getRepeaterDataSame = function(options) {
        let elementId = this.getElementIds()[0];
        let diff = $axure.ex.getRepeaterDataSame(elementId);
        return $axure.ex.formatRepeaterData(diff, options);
      };
      $axure.ex.repeaterAddItem = $ax.repeater.addItem;
      $axure.ex.addRepeaterData = function(elementId, rows) {
        let event = { targetElement: void 0, srcElement: void 0 };
        let repeater = $axure.ex.getRepeater(elementId);
        let columns = repeater.dataProps;
        let itemDefaultValue = { type: "text", text: "" };
        for (let i = 0, ilen = rows.length; i < ilen; i++) {
          let source = rows[i];
          let target = {};
          for (let j = 0, jlen = columns.length; j < jlen; j++) {
            let column = columns[j];
            let item = source[column];
            if (item === void 0) {
              item = itemDefaultValue;
            } else if (!item.hasOwnProperty("type") && !item.hasOwnProperty("text")) {
              item = { type: "text", text: item };
            } else {
              item = $ax.deepCopy(item);
            }
            target[column] = item;
          }
          $ax.repeater.addItem(elementId, target, event);
        }
      };
      $ax.public.fn.addRepeaterData = function(rows) {
        let elementId = this.getElementIds()[0];
        $axure.ex.addRepeaterData(elementId, rows);
        $axure.ex.refreshRepeater(elementId);
        return this;
      };
      $ax.repeater.addItem = function() {
        let elementId = arguments[0];
        $axure.ex.repeaterAddItem(...arguments);
        $(`#${elementId}`).trigger("REPEATER_DATA_ADDED", { ...arguments });
      };
      $axure.ex.deleteItems = $ax.repeater.deleteItems;
      $ax.public.fn.deleteRepeaterData = function(rowsCount) {
        rowsCount = rowsCount || 1;
        let data = this.getRepeaterData();
        let newData = data.slice(0, data.length - rowsCount);
        let elementId = this.getElementIds()[0];
        $axure.ex.clearRepeaterData(elementId);
        $axure.ex.addRepeaterData(elementId, newData);
        $axure.ex.refreshRepeater(elementId);
        return this;
      };
      $ax.repeater.deleteItems = function() {
        let elementId = arguments[0];
        $axure.ex.deleteItems(...arguments);
        $(`#${elementId}`).trigger("REPEATER_DATA_DELETED", { ...arguments });
      };
      $axure.ex.pushItems = $ax.repeater.pushItems;
      $ax.repeater.pushItems = function() {
        let elementId = arguments[0];
        $axure.ex.pushItems(...arguments);
        $(`#${elementId}`).trigger("REPEATER_DATA_PUSH", { ...arguments });
      };
      $axure.ex.updateEditItems = $ax.repeater.updateEditItems;
      $ax.repeater.updateEditItems = function() {
        let elementId = arguments[0];
        $axure.ex.updateEditItems(...arguments);
        $(`#${elementId}`).trigger("REPEATER_DATA_UPDATED", { ...arguments });
      };
      $ax.public.fn.getOverlapData = function(extraRawData, format) {
        let elementId = this.getElementIds()[0];
        let rep = $axure(`#${elementId}`);
        let latestRawData = rep.getRepeaterData({ format: "default" });
        let overlapData = getOverlapData(extraRawData, latestRawData);
        return $axure.ex.formatRepeaterData(overlapData, format);
      };
      $ax.public.fn.setRepeaterData = function(rows) {
        let elementId = this.getElementIds()[0];
        $axure.ex.clearRepeaterData(elementId);
        $axure.ex.addRepeaterData(elementId, rows);
        $axure.ex.refreshRepeater(elementId);
        $(`#${elementId}`).trigger("REPEATER_DATA_SET", { ...arguments });
        return this;
      };
      $axure.ex.clearRepeaterData = function(elementId) {
        let ids = $axure.ex.getRepeaterRows(elementId);
        $ax.repeater.addEditItems(elementId, ids);
        $ax.repeater.deleteItems(elementId, {}, "marked", void 0);
      };
      $ax.public.fn.clearRepeaterData = function() {
        let elementId = this.getElementIds()[0];
        $axure.ex.clearRepeaterData(elementId);
        $axure.ex.refreshRepeater(elementId);
        return this;
      };
      $axure.ex.getPanelStates = function(elementId) {
        let result = [];
        for (let index = 1; ; index++) {
          let element = $("#" + elementId + "_state" + (index - 1));
          if (!element.length)
            break;
          let name = element.attr("data-label");
          result[index] = name;
          result[name] = index;
        }
        return result;
      };
      $ax.public.fn.getPanelStates = function() {
        let states = $axure.ex.getPanelStates(this.getElementIds()[0]);
        return states;
      };
      $axure.ex.getCurrentPanelState = function(elementId) {
        let current;
        let states = $(`#${elementId}`).children(`.panel_state`);
        $.each(states, (idx, item) => {
          if ($(item).css("visibility") != "hidden" && $(item).css("display") != "none") {
            current = item;
          }
        });
        return current;
      };
      $ax.public.fn.getCurrentPanelState = function() {
        let current = $axure.ex.getCurrentPanelState(this.getElementIds()[0]);
        return current;
      };
      $axure.ex.setPanelStateByName = function(elementId, stateName, options, showWhenSet) {
        let states = $axure.ex.getPanelStates(elementId);
        for (let k2 = 0; k2 < states.length; k2++) {
          if (states[k2] == stateName) {
            let stateNum = k2;
            $axure("#" + elementId).SetPanelState(stateNum, options || {}, showWhenSet || false);
          }
        }
      };
      $ax.public.fn.setPanelStateByName = function(stateName, options, showWhenSet) {
        let elementId = this.getElementIds()[0];
        $axure.ex.setPanelStateByName(elementId, stateName, options, showWhenSet);
        return this;
      };
      $ax.public.fn.setPanelStateByIndex = function(index, options, showWhenSet) {
        let elementId = this.getElementIds()[0];
        $axure("#" + elementId).SetPanelState(index, options || {}, showWhenSet || false);
        return this;
      };
      $ax.public.fn.getId = function() {
        return this.getElementIds()[0];
      };
      $ax.public.fn.getEl = function() {
        return this.getElements()[0];
      };
      $axure.find = find;
      $ax.public.getGlobalVariable = $ax.getGlobalVariable = function(name) {
        return $ax.globalVariableProvider.getVariableValue(name);
      };
      $ax.public.fn.buttonMode = function(flag) {
        this.$().css("cursor", flag ? "pointer" : "default");
      };
      $ax.public.fn.ghostMode = function(flag) {
        this.$().css("pointer-events", flag ? "none" : "auto");
      };
      $axure.ex.redirect = true;
      $axure.ex.beforeNavFn = function() {
      };
      $axure.beforeNav = function(callback) {
        $axure.ex.beforeNavFn = callback;
      };
      $axure.ex.navigate = $ax.public.navigate;
      $ax.public.navigate = $ax.navigate = function(options) {
        let stop = (flag) => {
          if (flag === void 0) {
            flag = true;
          }
          $axure.ex.redirect = !flag;
        };
        $axure.ex.beforeNavFn(options, stop);
        if (!$axure.ex.redirect)
          return;
        $axure.ex.navigate(options);
      };
      $axure.getOverlapData = getOverlapData;
      $axure.getDiffData = getDiffData;
    });
  }
  function getOverlapData(data1, data2) {
    let bigData = data1.length > data2.length ? data1 : data2;
    let smallData = data1.length < data2.length ? data1 : data2;
    smallData.forEach((a, i) => {
      let _a = JSON.stringify(a);
      bigData.forEach((b, j) => {
        let _b = JSON.stringify(b);
        if (_a == _b) {
          bigData[j] = null;
        }
      });
      bigData = bigData.filter(Boolean);
    });
    return bigData;
  }
  function getDiffData(data1, data2) {
    let diff = data1.concat(data2).map((item) => JSON.stringify(item)).filter((value, idx, arr) => {
      return arr.indexOf(value) == arr.lastIndexOf(value);
    });
    return JSON.parse(`[${diff}]`);
  }
  function tree(_data) {
    let scanObj = [];
    let maxLevel = _data.length > 0 ? Object.keys(_data[0]).length : 0;
    const unique = function(arr, obj) {
      let _arr = [], _obj = [];
      for (let i = 0; i < arr.length; i++) {
        if (!_arr.includes(arr[i])) {
          _arr.push(arr[i]);
          _obj.push(obj[i]);
        }
      }
      return [_arr, _obj];
    };
    for (let i = 0; i < maxLevel; i++) {
      let cid = `c${i + 1}`;
      let arr = [], obj = [];
      for (let k2 in _data) {
        let item = _data[k2];
        arr.push(item[cid]);
        obj.push({ value: item[cid], label: item[cid], parent: item[`c${i}`], children: [] });
      }
      unique(arr, obj)[0];
      scanObj[i] = unique(arr, obj)[1];
    }
    let len = scanObj.length;
    for (let i = 0; i < len; i++) {
      let curIdx = len - i - 1;
      let nextIdx = len - i - 2;
      let curItem = scanObj[curIdx];
      let nextItem = scanObj[nextIdx];
      for (let k2 in curItem) {
        let _current = curItem[k2];
        for (let n in nextItem) {
          let _next = nextItem[n];
          if (_current.parent == _next.value) {
            _next.children.push(_current);
          }
        }
      }
    }
    for (let t = 0; t < scanObj[0].length; t++) {
      delete scanObj[0][t].parent;
    }
    return scanObj[0];
  }
  function trimTreeData(arr) {
    for (let i = 0; i < arr.length; i++) {
      let item = arr[i];
      if (item.children.length > 0) {
        if (item.children.length == 1 && !item.children[0].value) {
          delete item.children;
        } else {
          trimTreeData(item.children);
        }
      } else if (item.children && item.children.length == 0) {
        delete item.children;
      }
    }
  }
  function loadJsModule(url, callback) {
    let script = document.createElement("script");
    script.onload = callback || function() {
    };
    script.setAttribute("type", "module");
    script.setAttribute("src", url);
    document.querySelector("body").appendChild(script);
  }
  function testExp() {
    console.error("axlib.testExp() 已弃用");
  }
  function saveTextFile(str, fileName) {
    str = str || "axlib";
    fileName = fileName || "text.txt";
    const blob = new Blob([str], { type: "application/json;charset=utf-8" });
    const objectURL = URL.createObjectURL(blob);
    const anchor = document.createElement("a");
    anchor.href = objectURL;
    anchor.download = fileName;
    anchor.click();
    URL.revokeObjectURL(objectURL);
  }
  function find() {
    let args = [...arguments];
    let obj = {};
    for (let i = 0; i < args.length; i++) {
      let name = args[i];
      let el = $axure("@" + name);
      if (el.$().length > 0) {
        obj[name] = el;
      }
    }
    return obj;
  }
  function loading(container, show, options) {
    options = options || { color: "#fff", opacity: 0.2, scale: 1.2, delay: 0, dur: 1, blending: "difference" };
    if (show === void 0) {
      show = true;
    }
    let display = show ? "block" : "none";
    let svg = `
      <svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" viewBox="0 0 38 38" stroke="${options.color}" style="transform:scale(${options.scale});">
        <g fill="none" fill-rule="evenodd">
          <g transform="translate(1 1)" stroke-width="2">
            <circle stroke-opacity="${options.opacity}" cx="18" cy="18" r="18"/>
            <path d="M36 18c0-9.94-8.06-18-18-18">
              <animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="${options.dur}s" repeatCount="indefinite"/>
            </path>
          </g>
        </g>
      </svg>
    `;
    svg = svg.minify();
    if (!window.$axure.loadingCSSRulesInited) {
      $("head").append(`
        <style>
          html, body { height: 100%; }
          .ax-loading { display:${display}; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 99999; mix-blend-mode:${options.blending}; pointer-events:none; transform: scale(.5); }
          .ax-loading-svg { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
        </style>
      `);
      window.$axure.loadingCSSRulesInited = true;
    }
    if ($(container).children(".ax-loading").length === 0) {
      $(container).append(`<div class="ax-loading"><div class="ax-loading-svg">${svg}</div></div>`);
    }
    return $(container).children(".ax-loading").get(0);
  }
  function hosting(cloud) {
    cloud = cloud || "axhub";
    if (cloud == "axhub") {
      let btnUpload = $("#axhub-rp9-root a i", top.document);
      if (btnUpload.length === 0) {
        trace("无法同步, 你需要先为浏览器安装axhub插件!");
      } else {
        btnUpload.click();
      }
    }
  }
  function trace() {
    console.group("%cAXLIB", "color:#fff; font-weight:bold; background:#08f; padding:4px 8px; border-radius:3px;");
    console.log(...arguments);
    console.groupEnd();
  }
  function layout(mode) {
    if (self == top)
      return;
    mode = mode !== void 0 ? mode : 0;
    setTimeout(() => {
      let shell = window.parent.document;
      let hash = shell.location.hash;
      if (mode > 0) {
        if (hash.indexOf("&fn=0") < 0) {
          $(shell).find("#showNotesOption").click();
        }
        if (hash.indexOf("&hi=1") > -1) {
          $(shell).find("#showHotspotsOption").click();
        }
      }
      if (mode === 0) {
        $(shell).find("#maximizePanelContainer").show();
        $(shell).find(`.vpScaleOption[val="0"]`).click();
      } else if (mode === 1) {
        $(shell).find(`.vpScaleOption[val="0"]`).click();
        $(shell).find("#interfaceControlFrameMinimizeContainer").click();
        $(shell).find("#maximizePanelContainer").hide();
      } else if (mode === 2) {
        $(shell).find(`.vpScaleOption[val="1"]`).click();
        $(shell).find("#interfaceControlFrameMinimizeContainer").click();
        $(shell).find("#maximizePanelContainer").hide();
      } else if (mode === 3) {
        $(shell).find(`.vpScaleOption[val="2"]`).click();
        $(shell).find("#interfaceControlFrameMinimizeContainer").click();
        $(shell).find("#maximizePanelContainer").hide();
      }
    }, 0);
  }
  function use() {
    console.error("axlib.use() 已弃用");
  }
  function getJsonBinClass() {
    class jsonbin {
      constructor(id) {
        __publicField(this, "_id", "");
        __publicField(this, "_apiKey", "");
        __publicField(this, "_accessKey", "");
        this._id = id;
      }
      get id() {
        return this._id;
      }
      set id(id) {
        this._id = id;
      }
      get apiKey() {
        return this._apiKey;
      }
      set apiKey(key) {
        this._apiKey = key;
      }
      get accessKey() {
        return this._accessKey;
      }
      set accessKey(key) {
        this._accessKey = key;
      }
      read() {
        const binId = this._id;
        const binVersion = "latest";
        return fetch(`https://api.jsonbin.io/v3/b/${binId}/${binVersion}`, {
          headers: {
            "Content-Type": "application/json",
            "X-Access-Key": this._accessKey
          }
        }).then((response) => response.json()).catch((error) => {
          console.error(error);
        });
      }
      update(data) {
        const binId = this._id;
        return fetch(`https://api.jsonbin.io/v3/b/${binId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json"
            // 'X-Access-Key': this._accessKey,
          },
          body: JSON.stringify(data)
        }).then((response) => response.json()).catch((error) => {
          console.error(error);
        });
      }
      create(_name, _private = false) {
        const headers = {
          "Content-Type": "application/json",
          "X-Bin-Private": _private
        };
        if (this._apiKey != "") {
          headers["X-Master-Key"] = this._apiKey;
        }
        if (this._accessKey != "" && this._apiKey == "") {
          headers["X-Access-Key"] = this._accessKey;
        }
        if (_name) {
          headers["X-Bin-Name"] = _name;
        }
        return fetch(`https://api.jsonbin.io/v3/b`, {
          method: "POST",
          headers,
          body: JSON.stringify({ foo: "bar" })
        }).then((response) => response.json()).catch((error) => {
          console.error(error);
        });
      }
      delete(binId = this._id) {
        const headers = {};
        if (this._apiKey != "") {
          headers["X-Master-Key"] = this._apiKey;
        }
        if (this._accessKey != "" && this._apiKey == "") {
          headers["X-Access-Key"] = this._accessKey;
        }
        return fetch(`https://api.jsonbin.io/v3/b/${binId}`, {
          method: "DELETE",
          headers
        }).then((response) => response.json()).catch((error) => {
          console.error(error);
        });
      }
    }
    return jsonbin;
  }
  function utils() {
    Object.defineProperty(String.prototype, "minify", {
      enumerable: false,
      configurable: true,
      value: function() {
        return this.replace(/ *[\r|\n] */gm, "");
      }
    });
    $.isJSON = function(str) {
      try {
        if (typeof JSON.parse(str) == "object") {
          return true;
        }
      } catch (e) {
      }
      return false;
    };
    $.fn.extend({
      "hasAttr": (name) => {
        let _attr = $(this).attr(name);
        if (typeof _attr !== "undefined" && _attr !== false) {
          return true;
        } else {
          return false;
        }
      }
    });
    $.getEl = getJqEl;
  }
  function getJqEl(...args) {
    let arr = [];
    args.forEach((name) => {
      arr.push($(`[data-label="${name}"]`));
    });
    const result = arr.length === 1 ? arr[0] : arr;
    return result;
  }
  function getEl(...args) {
    let arr = [];
    args.forEach((name) => {
      arr.push(document.querySelector(`[data-label="${name}"]`));
    });
    const result = arr.length === 1 ? arr[0] : arr;
    return result;
  }
  function getPlugins() {
    return {
      toast: {
        vars: "$.toast",
        files: [
          "https://ax.minicg.com/plugins/toast/jquery.toast.min.css",
          "https://ax.minicg.com/plugins/toast/jquery.toast.min.js"
        ]
      },
      toastify: {
        vars: "Toastify",
        files: [
          "https://ax.minicg.com/plugins/toastify/toastify-all.min.js"
        ]
      },
      swal2: {
        vars: "Swal",
        files: [
          "https://ax.minicg.com/plugins/swal2/bootstrap-4.min.css",
          "https://ax.minicg.com/plugins/swal2/sweetalert2.min.js"
        ]
      },
      keepfit: {
        vars: "keepfit",
        files: [
          "https://ax.minicg.com/plugins/keepfit/keepfit.min.js"
        ]
      },
      aframe: {
        vars: "aframe",
        files: [
          "https://ax.minicg.com/aframe-130.min.js"
        ]
      },
      preload: {
        vars: "preload",
        files: [
          "https://ax.minicg.com/preloadjs.min.js"
        ]
      },
      pico: {
        vars: "pico",
        files: [
          "https://ax.minicg.com/pico.min.css"
        ]
      },
      crypto: {
        vars: "crypto",
        files: [
          "https://ax.minicg.com/crypto-js.min.js"
        ]
      },
      faker: {
        vars: "faker",
        files: [
          "https://ax.minicg.com/faker.min.js"
        ]
      },
      tailwind: {
        vars: "tailwind",
        files: [
          "https://ax.minicg.com/tailwind.min.css",
          "https://ax.minicg.com/tailwindcss-jit-cdn.umd.min.js"
        ]
      },
      echarts: {
        vars: "echarts",
        files: [
          "https://ax.minicg.com/echarts.min.js",
          "https://ax.minicg.com/echarts-gl.min.js"
        ]
      },
      tweakpane: {
        vars: "Tweakpane",
        files: [
          "https://ax.minicg.com/plugins/tweakpane/tweakpane.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-essentials.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-rotation.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-textarea-plugin.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-camerakit.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-image.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-infodump.min.js",
          "https://ax.minicg.com/plugins/tweakpane/tweakpane-plugin-profiler.min.js"
        ]
      }
    };
  }
  function initYepNope() {
    var doc = document, undef, docElement = doc.documentElement, sTimeout = window.setTimeout, firstScript = doc.getElementsByTagName("script")[0], toString = {}.toString, execStack = [], started = 0, noop = function() {
    }, isGecko = "MozAppearance" in docElement.style, isGeckoLTE18 = isGecko && !!doc.createRange().compareNode, insBeforeObj = isGeckoLTE18 ? docElement : firstScript.parentNode, isOpera = window.opera && toString.call(window.opera) == "[object Opera]", isIE = !!doc.attachEvent && !isOpera, strJsElem = isGecko ? "object" : isIE ? "script" : "img", strCssElem = isIE ? "script" : strJsElem, isArray = Array.isArray || function(obj) {
      return toString.call(obj) == "[object Array]";
    }, isObject = function(obj) {
      return Object(obj) === obj;
    }, isString = function(s) {
      return typeof s == "string";
    }, isFunction = function(fn) {
      return toString.call(fn) == "[object Function]";
    }, globalFilters = [], scriptCache = {}, prefixes = {
      // key value pair timeout options
      timeout: function(resourceObj, prefix_parts) {
        if (prefix_parts.length) {
          resourceObj["timeout"] = prefix_parts[0];
        }
        return resourceObj;
      }
    }, handler, yepnope;
    function isFileReady(readyState) {
      return !readyState || readyState == "loaded" || readyState == "complete" || readyState == "uninitialized";
    }
    function injectJs(src, cb, attrs, timeout, err, internal) {
      var script = doc.createElement("script"), done, i;
      timeout = timeout || yepnope["errorTimeout"];
      script.src = src;
      for (i in attrs) {
        script.setAttribute(i, attrs[i]);
      }
      cb = internal ? executeStack : cb || noop;
      script.onreadystatechange = script.onload = function() {
        if (!done && isFileReady(script.readyState)) {
          done = 1;
          cb();
          script.onload = script.onreadystatechange = null;
        }
      };
      sTimeout(function() {
        if (!done) {
          done = 1;
          cb(1);
        }
      }, timeout);
      err ? script.onload() : firstScript.parentNode.insertBefore(script, firstScript);
    }
    function injectCss(href, cb, attrs, timeout, err, internal) {
      var link = doc.createElement("link"), i;
      timeout = timeout || yepnope["errorTimeout"];
      cb = internal ? executeStack : cb || noop;
      link.href = href;
      link.rel = "stylesheet";
      link.type = "text/css";
      for (i in attrs) {
        link.setAttribute(i, attrs[i]);
      }
      if (!err) {
        firstScript.parentNode.insertBefore(link, firstScript);
        sTimeout(cb, 0);
      }
    }
    function executeStack() {
      var i = execStack.shift();
      started = 1;
      if (i) {
        if (i["t"]) {
          sTimeout(function() {
            (i["t"] == "c" ? yepnope["injectCss"] : yepnope["injectJs"])(i["s"], 0, i["a"], i["x"], i["e"], 1);
          }, 0);
        } else {
          i();
          executeStack();
        }
      } else {
        started = 0;
      }
    }
    function preloadFile(elem, url, type, splicePoint, dontExec, attrObj, timeout) {
      timeout = timeout || yepnope["errorTimeout"];
      var preloadElem = doc.createElement(elem), done = 0, firstFlag = 0, stackObject = {
        "t": type,
        // type
        "s": url,
        // src
        //r: 0,        // ready
        "e": dontExec,
        // set to true if we don't want to reinject
        "a": attrObj,
        "x": timeout
      };
      if (scriptCache[url] === 1) {
        firstFlag = 1;
        scriptCache[url] = [];
      }
      function onload(first) {
        if (!done && isFileReady(preloadElem.readyState)) {
          stackObject["r"] = done = 1;
          !started && executeStack();
          preloadElem.onload = preloadElem.onreadystatechange = null;
          if (first) {
            if (elem != "img") {
              sTimeout(function() {
                insBeforeObj.removeChild(preloadElem);
              }, 50);
            }
            for (var i in scriptCache[url]) {
              if (scriptCache[url].hasOwnProperty(i)) {
                scriptCache[url][i].onload();
              }
            }
          }
        }
      }
      if (elem == "object") {
        preloadElem.data = url;
      } else {
        preloadElem.src = url;
        preloadElem.type = elem;
      }
      preloadElem.width = preloadElem.height = "0";
      preloadElem.onerror = preloadElem.onload = preloadElem.onreadystatechange = function() {
        onload.call(this, firstFlag);
      };
      execStack.splice(splicePoint, 0, stackObject);
      if (elem != "img") {
        if (firstFlag || scriptCache[url] === 2) {
          insBeforeObj.insertBefore(preloadElem, isGeckoLTE18 ? null : firstScript);
          sTimeout(onload, timeout);
        } else {
          scriptCache[url].push(preloadElem);
        }
      }
    }
    function load(resource, type, dontExec, attrObj, timeout) {
      started = 0;
      type = type || "j";
      if (isString(resource)) {
        preloadFile(type == "c" ? strCssElem : strJsElem, resource, type, this["i"]++, dontExec, attrObj, timeout);
      } else {
        execStack.splice(this["i"]++, 0, resource);
        execStack.length == 1 && executeStack();
      }
      return this;
    }
    function getYepnope() {
      var y = yepnope;
      y["loader"] = {
        "load": load,
        "i": 0
      };
      return y;
    }
    yepnope = function(needs) {
      var i, need, chain = window["yepnope"]["loader"];
      function satisfyPrefixes(url) {
        var parts = url.split("!"), gLen = globalFilters.length, origUrl = parts.pop(), pLen = parts.length, res = {
          "url": origUrl,
          // keep this one static for callback variable consistency
          "origUrl": origUrl,
          "prefixes": parts
        }, mFunc, j, prefix_parts;
        for (j = 0; j < pLen; j++) {
          prefix_parts = parts[j].split("=");
          mFunc = prefixes[prefix_parts.shift()];
          if (mFunc) {
            res = mFunc(res, prefix_parts);
          }
        }
        for (j = 0; j < gLen; j++) {
          res = globalFilters[j](res);
        }
        return res;
      }
      function getExtension(url) {
        return url.split(".").pop().split("?").shift();
      }
      function loadScriptOrStyle(input, callback, chain2, index, testResult) {
        var resource = satisfyPrefixes(input), autoCallback = resource["autoCallback"];
        getExtension(resource["url"]);
        if (resource["bypass"]) {
          return;
        }
        if (callback) {
          callback = isFunction(callback) ? callback : callback[input] || callback[index] || callback[input.split("/").pop().split("?")[0]];
        }
        if (resource["instead"]) {
          return resource["instead"](input, callback, chain2, index, testResult);
        } else {
          if (scriptCache[resource["url"]]) {
            resource["noexec"] = true;
          } else {
            scriptCache[resource["url"]] = 1;
          }
          chain2.load(resource["url"], resource["forceCSS"] || !resource["forceJS"] && "css" == getExtension(resource["url"]) ? "c" : undef, resource["noexec"], resource["attrs"], resource["timeout"]);
          if (isFunction(callback) || isFunction(autoCallback)) {
            chain2["load"](function() {
              getYepnope();
              callback && callback(resource["origUrl"], testResult, index);
              autoCallback && autoCallback(resource["origUrl"], testResult, index);
              scriptCache[resource["url"]] = 2;
            });
          }
        }
      }
      function loadFromTestObject(testObject, chain2) {
        var testResult = !!testObject["test"], group = testResult ? testObject["yep"] : testObject["nope"], always = testObject["load"] || testObject["both"], callback = testObject["callback"] || noop, cbRef = callback, complete = testObject["complete"] || noop, needGroupSize, callbackKey;
        function handleGroup(needGroup, moreToCome) {
          if (!needGroup) {
            !moreToCome && complete();
          } else if (isString(needGroup)) {
            if (!moreToCome) {
              callback = function() {
                var args = [].slice.call(arguments);
                cbRef.apply(this, args);
                complete();
              };
            }
            loadScriptOrStyle(needGroup, callback, chain2, 0, testResult);
          } else if (isObject(needGroup)) {
            needGroupSize = function() {
              var count = 0, i2;
              for (i2 in needGroup) {
                if (needGroup.hasOwnProperty(i2)) {
                  count++;
                }
              }
              return count;
            }();
            for (callbackKey in needGroup) {
              if (needGroup.hasOwnProperty(callbackKey)) {
                if (!moreToCome && !--needGroupSize) {
                  if (!isFunction(callback)) {
                    callback[callbackKey] = function(innerCb) {
                      return function() {
                        var args = [].slice.call(arguments);
                        innerCb && innerCb.apply(this, args);
                        complete();
                      };
                    }(cbRef[callbackKey]);
                  } else {
                    callback = function() {
                      var args = [].slice.call(arguments);
                      cbRef.apply(this, args);
                      complete();
                    };
                  }
                }
                loadScriptOrStyle(needGroup[callbackKey], callback, chain2, callbackKey, testResult);
              }
            }
          }
        }
        handleGroup(group, !!always);
        always && handleGroup(always);
      }
      if (isString(needs)) {
        loadScriptOrStyle(needs, 0, chain, 0);
      } else if (isArray(needs)) {
        for (i = 0; i < needs.length; i++) {
          need = needs[i];
          if (isString(need)) {
            loadScriptOrStyle(need, 0, chain, 0);
          } else if (isArray(need)) {
            yepnope(need);
          } else if (isObject(need)) {
            loadFromTestObject(need, chain);
          }
        }
      } else if (isObject(needs)) {
        loadFromTestObject(needs, chain);
      }
    };
    yepnope["addPrefix"] = function(prefix, callback) {
      prefixes[prefix] = callback;
    };
    yepnope["addFilter"] = function(filter) {
      globalFilters.push(filter);
    };
    yepnope["errorTimeout"] = 1e4;
    if (doc.readyState == null && doc.addEventListener) {
      doc.readyState = "loading";
      doc.addEventListener("DOMContentLoaded", handler = function() {
        doc.removeEventListener("DOMContentLoaded", handler, 0);
        doc.readyState = "complete";
      }, 0);
    }
    window["yepnope"] = getYepnope();
    window["yepnope"]["executeStack"] = executeStack;
    window["yepnope"]["injectJs"] = injectJs;
    window["yepnope"]["injectCss"] = injectCss;
  }
})();
//# sourceMappingURL=axlib-v3.min.js.map
